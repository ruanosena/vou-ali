// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Endereco {
  id                String   @id @default(uuid())
  enderecoFormatado String   @map("endereco_formatado")
  lat               Decimal
  lng               Decimal
  norte             Decimal?
  sul               Decimal?
  leste             Decimal?
  oeste             Decimal?
  locais            Local[]

  @@unique(name: "posicao", [lat, lng])
  @@map("enderecos")
}

model Local {
  id                String         @id @default(cuid())
  lat               Decimal
  lng               Decimal
  nome              String
  slug              String         @unique
  apelidos          LocalApelido[]
  endereco          Endereco       @relation(fields: [enderecoId], references: [id], onDelete: Cascade)
  enderecoId        String         @map("endereco_id")
  site              String?
  telefone          String?
  telefoneFormatado String?        @map("telefone_formatado")
  redesSociais      RedeSocial[]
  publicado         Boolean        @default(false)
  usuario           User           @relation(fields: [usuarioId], references: [id], onDelete: Restrict)
  usuarioId         String         @map("usuario_id")

  @@index([slug])
  @@map("locais")
}

model LocalApelido {
  id      Int    @id @default(autoincrement())
  apelido String
  local   Local  @relation(fields: [localId], references: [id])
  localId String @map("local_id")

  @@index([apelido])
  @@map("local_apelidos")
}

model RedeSocial {
  id      String         @id @default(uuid())
  nome    RedeSocialNome
  link    String
  local   Local          @relation(fields: [localId], references: [id])
  localId String         @map("local_id")

  @@map("redes_sociais")
}

enum RedeSocialNome {
  WHATSAPP
  INSTAGRAM
  FACEBOOK
  TELEGRAM
  EMAIL

  @@map("redes_sociais_nomes")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locais Local[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
